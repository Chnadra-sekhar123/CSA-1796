import itertools

def calculate_total_distance(order, distances):
    total_distance = 0
    for i in range(len(order) - 1):
        total_distance += distances[order[i]][order[i + 1]]
    total_distance += distances[order[-1]][order[0]]  # Return to the starting city
    return total_distance

def brute_force_tsp(distances):
    num_cities = len(distances)
    if num_cities <= 2:
        return list(range(num_cities)), sum(distances)

    # Generate all possible permutations of city orders
    all_orders = itertools.permutations(range(num_cities))

    min_distance = float('inf')
    best_order = None

    for order in all_orders:
        distance = calculate_total_distance(order, distances)
        if distance < min_distance:
            min_distance = distance
            best_order = order

    return list(best_order), min_distance

# Example usage:
if __name__ == "__main__":
    cities = ["A", "B", "C", "D"]
    distances = [
        [0, 10, 15, 20],
        [10, 0, 35, 25],
        [15, 35, 0, 30],
        [20, 25, 30, 0]
    ]

    best_order, min_distance = brute_force_tsp(distances)
    print("Best order to visit cities:", [cities[i] for i in best_order])
    print("Minimum distance:", min_distance)
